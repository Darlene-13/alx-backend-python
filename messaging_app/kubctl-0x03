#!/bin/bash

echo "=================================================="
echo "    Kubernetes Rolling Update Strategy Script    "
echo "=================================================="

# This script demonstrates:
# - kubectl apply to trigger rolling updates
# - kubectl rollout status to monitor update progress
# - curl testing to verify zero downtime
# - Pod verification before and after update

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to get service endpoint
get_service_endpoint() {
    local service_name="django-messaging-service-blue"
    local service_ip=$(minikube kubectl -- get service $service_name -o jsonpath='{.spec.clusterIP}' 2>/dev/null)
    local service_port=$(minikube kubectl -- get service $service_name -o jsonpath='{.spec.ports[0].port}' 2>/dev/null)
    
    if [ -n "$service_ip" ] && [ -n "$service_port" ]; then
        echo "$service_ip:$service_port"
    else
        echo ""
    fi
}

# Function to test service availability
test_service_availability() {
    local endpoint=$1
    local max_attempts=3
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if minikube kubectl -- run curl-test-$RANDOM --image=curlimages/curl --rm -i --restart=Never --timeout=10s -- \
           curl -s --max-time 5 http://$endpoint/ >/dev/null 2>&1; then
            return 0
        fi
        attempt=$((attempt + 1))
        sleep 1
    done
    return 1
}

# Function to continuously test for downtime
test_continuous_availability() {
    local endpoint=$1
    local duration=$2
    local success_count=0
    local failure_count=0
    local total_requests=0
    
    echo "🔄 Testing continuous availability for $duration seconds..."
    echo "   Endpoint: http://$endpoint/"
    echo "   Starting continuous requests..."
    
    local end_time=$(($(date +%s) + $duration))
    
    while [ $(date +%s) -lt $end_time ]; do
        total_requests=$((total_requests + 1))
        
        if test_service_availability $endpoint; then
            success_count=$((success_count + 1))
            echo -n "✅"
        else
            failure_count=$((failure_count + 1))
            echo -n "❌"
        fi
        
        # Print stats every 10 requests
        if [ $((total_requests % 10)) -eq 0 ]; then
            echo " ($success_count success, $failure_count failures)"
        fi
        
        sleep 2
    done
    
    echo ""
    echo "📊 Availability Test Results:"
    echo "   Total Requests: $total_requests"
    echo "   Successful: $success_count"
    echo "   Failed: $failure_count"
    
    if [ $failure_count -eq 0 ]; then
        echo "   🎉 100% Availability - Zero Downtime Achieved!"
        return 0
    else
        local availability_percentage=$((success_count * 100 / total_requests))
        echo "   📈 Availability: $availability_percentage%"
        if [ $availability_percentage -ge 95 ]; then
            echo "   ✅ High Availability Maintained"
            return 0
        else
            echo "   ⚠️  Availability Below 95%"
            return 1
        fi
    fi
}

# Function to show pod details
show_pod_details() {
    local phase=$1
    echo ""
    echo "📋 Pod Status ($phase Rolling Update):"
    echo "======================================"
    echo "kubectl get pods -l app=django-messaging-app,version=blue"
    minikube kubectl -- get pods -l app=django-messaging-app,version=blue -o wide
    
    echo ""
    echo "Pod Ages and Ready Status:"
    minikube kubectl -- get pods -l app=django-messaging-app,version=blue -o custom-columns=NAME:.metadata.name,READY:.status.conditions[?(@.type==\"Ready\")].status,AGE:.metadata.creationTimestamp
}

# Function to monitor rollout status
monitor_rollout() {
    local deployment_name=$1
    
    echo "📊 Monitoring rollout status..."
    echo "kubectl rollout status deployment/$deployment_name"
    
    # Start monitoring in background and capture output
    (
        minikube kubectl -- rollout status deployment/$deployment_name --timeout=300s
        echo "ROLLOUT_COMPLETE" > /tmp/rollout_status
    ) &
    
    local rollout_pid=$!
    
    # Monitor rollout progress
    echo "⏳ Rolling update in progress..."
    while kill -0 $rollout_pid 2>/dev/null; do
        echo -n "."
        sleep 2
    done
    
    wait $rollout_pid
    local rollout_exit_code=$?
    
    if [ $rollout_exit_code -eq 0 ]; then
        echo ""
        echo "✅ Rollout completed successfully!"
        return 0
    else
        echo ""
        echo "❌ Rollout failed or timed out"
        return 1
    fi
}

echo "Starting Rolling Update Process..."
echo ""

# Step 1: Set up Docker environment
echo "🐳 Setting up Docker environment..."
eval $(minikube docker-env)

# Step 2: Build new Docker image version 2.0
echo "🔨 Building new Docker image version 2.0..."
echo "docker build -t messaging-app:v2.0 ."

docker build -t messaging-app:v2.0 .

if [ $? -eq 0 ]; then
    echo "✅ Version 2.0 image built successfully"
else
    echo "❌ Failed to build version 2.0 image"
    exit 1
fi

echo ""

# Step 3: Check current deployment status
echo "📊 Current Deployment Status (Before Update):"
echo "=============================================="
minikube kubectl -- get deployments django-messaging-app-blue

show_pod_details "Before"

# Step 4: Get service endpoint for testing
echo ""
echo "🌐 Getting service endpoint for availability testing..."
SERVICE_ENDPOINT=$(get_service_endpoint)

if [ -z "$SERVICE_ENDPOINT" ]; then
    echo "⚠️  Service endpoint not found. Creating port-forward for testing..."
    # Start port-forward in background
    minikube kubectl -- port-forward service/django-messaging-service-blue 8080:8000 &
    PORT_FORWARD_PID=$!
    sleep 5
    SERVICE_ENDPOINT="localhost:8080"
    echo "📡 Using port-forward endpoint: $SERVICE_ENDPOINT"
else
    echo "📡 Service endpoint: $SERVICE_ENDPOINT"
fi

# Step 5: Test current service availability
echo ""
echo "🔍 Testing current service availability..."
if test_service_availability $SERVICE_ENDPOINT; then
    echo "✅ Service is currently available and responding"
else
    echo "❌ Service is not responding - cannot proceed with rolling update"
    exit 1
fi

# Step 6: Start continuous availability testing in background
echo ""
echo "🚀 Starting Rolling Update Process..."
echo "======================================"

# Start continuous testing in background
echo "📡 Starting continuous availability monitoring..."
(
    test_continuous_availability $SERVICE_ENDPOINT 60
    echo "AVAILABILITY_TEST_COMPLETE" > /tmp/availability_status
) &
AVAILABILITY_PID=$!

# Give availability testing a moment to start
sleep 3

# Step 7: Apply the updated deployment and trigger rolling update
echo ""
echo "🔄 Applying updated deployment to trigger rolling update..."
echo "kubectl apply -f blue_deployment.yaml"

minikube kubectl -- apply -f blue_deployment.yaml

if [ $? -eq 0 ]; then
    echo "✅ Updated deployment applied successfully"
    echo "🔄 Rolling update initiated..."
else
    echo "❌ Failed to apply updated deployment"
    kill $AVAILABILITY_PID 2>/dev/null
    exit 1
fi

# Step 8: Monitor the update progress
echo ""
monitor_rollout "django-messaging-app-blue"

if [ $? -ne 0 ]; then
    echo "❌ Rolling update failed"
    kill $AVAILABILITY_PID 2>/dev/null
    exit 1
fi

# Step 9: Wait for availability testing to complete
echo ""
echo "⏳ Waiting for availability testing to complete..."
wait $AVAILABILITY_PID
AVAILABILITY_RESULT=$?

# Step 10: Verify the rolling update is complete
echo ""
echo "🔍 Verifying Rolling Update Completion:"
echo "======================================="

echo ""
echo "Updated Deployment Status:"
minikube kubectl -- get deployments django-messaging-app-blue

show_pod_details "After"

# Step 11: Check rollout history
echo ""
echo "📜 Rollout History:"
echo "=================="
echo "kubectl rollout history deployment/django-messaging-app-blue"
minikube kubectl -- rollout history deployment/django-messaging-app-blue

# Step 12: Verify new image version in pods
echo ""
echo "🔍 Verifying Image Versions in Pods:"
echo "===================================="
echo "kubectl get pods -l app=django-messaging-app,version=blue -o jsonpath='{.items[*].spec.containers[0].image}'"
CURRENT_IMAGES=$(minikube kubectl -- get pods -l app=django-messaging-app,version=blue -o jsonpath='{.items[*].spec.containers[0].image}')
echo "Current pod images: $CURRENT_IMAGES"

if echo "$CURRENT_IMAGES" | grep -q "v2.0"; then
    echo "✅ All pods are running version 2.0"
else
    echo "⚠️  Some pods may still be running old version"
fi

# Step 13: Final service test
echo ""
echo "🏁 Final Service Verification:"
echo "=============================="
if test_service_availability $SERVICE_ENDPOINT; then
    echo "✅ Service is responding correctly after rolling update"
else
    echo "❌ Service is not responding after rolling update"
fi

# Clean up port-forward if used
if [ -n "$PORT_FORWARD_PID" ]; then
    kill $PORT_FORWARD_PID 2>/dev/null
fi

# Step 14: Summary
echo ""
echo "🎯 Rolling Update Summary:"
echo "=========================="
echo "✅ Docker image v2.0 built successfully"
echo "✅ Rolling update applied with kubectl apply"
echo "✅ Update progress monitored with kubectl rollout status"
echo "✅ Continuous availability testing performed"
echo "✅ Rolling update completed successfully"
echo "✅ Pod verification completed"

if [ $AVAILABILITY_RESULT -eq 0 ]; then
    echo "✅ Zero downtime achieved during rolling update!"
else
    echo "⚠️  Some availability issues detected during update"
fi

echo ""
echo "🔗 Useful Commands for Rolling Updates:"
echo "======================================="
echo "  kubectl apply -f blue_deployment.yaml                     # Apply updated deployment"
echo "  kubectl rollout status deployment/django-messaging-app-blue # Monitor rollout"
echo "  kubectl rollout history deployment/django-messaging-app-blue # View rollout history"
echo "  kubectl rollout undo deployment/django-messaging-app-blue   # Rollback if needed"
echo "  kubectl get pods -l version=blue                            # Check pod status"
echo "  kubectl describe deployment django-messaging-app-blue      # Detailed deployment info"

echo ""
echo "🎉 Rolling update completed successfully!"
echo "   Your Django messaging app has been updated to version 2.0"
echo "   with zero downtime using Kubernetes rolling update strategy!"