pipeline {
    agent any  // Changed to 'any' to support both Docker containers and Docker commands
    
    environment {
        PYTHONDONTWRITEBYTECODE = '1'
        PYTHONUNBUFFERED = '1'
        VENV = '.venv'
        // Docker environment variables
        DOCKER_IMAGE_NAME = 'darlene13/messaging-app'  // Replace with your Docker Hub username
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
        REGISTRY = 'https://index.docker.io/v1/'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out our source code from Github'
                git(
                    branch: 'main',
                    url: 'https://github.com/Darlene-13/alx-backend-python.git',
                    credentialsId: 'github-credentials'
                )
            }
        }
        
        stage('Install Dependencies') {
            agent {
                docker {
                    image 'python:3.10'
                    args '-u root:root'  // Runs as root to avoid permission issues
                    reuseNode true  // Important: reuse the node to access checked out code
                }
            }
            steps {
                echo 'Setting up Python environment and installing the dependencies'
                sh '''
                    python -m venv $VENV
                    . $VENV/bin/activate
                    pip3 install --upgrade pip

                    if [ -f messaging_app/requirements.txt ]; then
                        pip3 install -r messaging_app/requirements.txt
                    else
                        echo 'requirements.txt not found, installing basic testing packages'
                        pip3 install pytest pytest-html pytest-cov pytest-django Django
                    fi
                '''
            }
        }
        
        stage('Run Tests') {
            agent {
                docker {
                    image 'python:3.10'
                    args '-u root:root'
                    reuseNode true
                }
            }
            steps {
                echo 'Running tests using pytest'
                sh '''
                    # Set up environment again in this stage
                    python -m venv $VENV
                    . $VENV/bin/activate
                    pip3 install --upgrade pip
                    
                    # Install dependencies
                    if [ -f messaging_app/requirements.txt ]; then
                        pip3 install -r messaging_app/requirements.txt
                    else
                        pip3 install pytest pytest-html pytest-cov pytest-django Django
                    fi
                    
                    cd messaging_app
                    mkdir -p reports

                    pytest tests/ \
                        --junitxml=reports/report.xml \
                        --html=reports/report.html \
                        --self-contained-html \
                        --cov=. \
                        --cov-report=html:reports/coverage \
                        --cov-report=xml:reports/coverage.xml \
                        -v || true
                '''
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'Archiving test reports and artifacts....'
                archiveArtifacts artifacts: 'messaging_app/reports/**/*',
                                fingerprint: true,
                                allowEmptyArchive: true
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image for messaging app...'
                script {
                    dir('messaging_app') {
                        // Build the Docker image
                        def dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}")
                        
                        // Also tag as latest
                        dockerImage.tag("latest")
                        
                        // Store image info for later stages
                        env.DOCKER_IMAGE_ID = dockerImage.id
                        
                        echo "‚úÖ Successfully built Docker image: ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                    }
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                echo 'Testing the built Docker image...'
                script {
                    // Quick test to ensure the image works
                    sh """
                        echo 'Testing if Docker image starts correctly...'
                        docker run --rm -d --name messaging-app-test -p 8001:8000 ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
                        sleep 10
                        
                        # Test if the container is running
                        if docker ps | grep messaging-app-test; then
                            echo '‚úÖ Docker image test passed - container is running'
                            docker stop messaging-app-test
                        else
                            echo '‚ùå Docker image test failed - container not running'
                            docker logs messaging-app-test || true
                            exit 1
                        fi
                    """
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    // Login to Docker Hub and push the image
                    docker.withRegistry("${REGISTRY}", 'dockerhub-credentials') {
                        def dockerImage = docker.image("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}")
                        
                        // Push both the build-specific tag and latest
                        dockerImage.push()
                        dockerImage.push("latest")
                        
                        echo "‚úÖ Successfully pushed to Docker Hub:"
                        echo "   üì¶ ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                        echo "   üì¶ ${DOCKER_IMAGE_NAME}:latest"
                    }
                }
            }
        }
        
        stage('Clean Up Docker Images') {
            steps {
                echo 'Cleaning up local Docker images to save space...'
                sh '''
                    # Remove local images to save space
                    echo "Removing local Docker images..."
                    docker rmi ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} || echo "Image already removed"
                    docker rmi ${DOCKER_IMAGE_NAME}:latest || echo "Latest image already removed"
                    
                    # Clean up dangling images
                    echo "Cleaning up dangling images..."
                    docker image prune -f || echo "No dangling images to remove"
                    
                    echo "‚úÖ Docker cleanup completed"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Publishing the test results'

            // Publish JUnit test results
            junit testResults: 'messaging_app/reports/report.xml',
                allowEmptyResults: true

            // Publish HTML test reports
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'messaging_app/reports',
                reportFiles: 'report.html',
                reportName: 'PyTest Report'
            ])

            // Publish coverage report
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'messaging_app/reports/coverage',
                reportFiles: 'index.html',
                reportName: 'Coverage Report'
            ])
        }
        
        success {
            echo '''
            üéâ Pipeline completed successfully!
            
            üìã Summary:
            ‚úÖ Code checked out from GitHub
            ‚úÖ Dependencies installed
            ‚úÖ Tests executed and reports generated
            ‚úÖ Docker image built successfully
            ‚úÖ Docker image tested
            ‚úÖ Image pushed to Docker Hub
            
            üì¶ Docker Image Details:
            üè∑Ô∏è  Image: ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
            üè∑Ô∏è  Latest: ${DOCKER_IMAGE_NAME}:latest
            üåê Available at: https://hub.docker.com/r/${DOCKER_IMAGE_NAME}
            
            üöÄ To run your app locally:
            docker run -p 8000:8000 ${DOCKER_IMAGE_NAME}:latest
            '''
        }
        
        failure {
            echo '''
            ‚ùå Pipeline failed! Check the logs for more details.
            
            üîç Common issues to check:
            ‚Ä¢ GitHub credentials configuration
            ‚Ä¢ Docker Hub credentials setup
            ‚Ä¢ Docker daemon availability
            ‚Ä¢ Test failures in the application
            ‚Ä¢ Missing requirements.txt or dependencies
            '''
        }
        
        cleanup {
            echo "Cleaning up the workspace..."
            cleanWs()
        }
    }
}