name: Django Messaging App CI

# Trigger the workflow on push and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Environment variables for the entire workflow
env:
  DJANGO_SETTINGS_MODULE: messaging_app.settings
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Test against multiple Python versions
    strategy:
      matrix:
        python-version: [3.9, '3.10', 3.11]
    
    # Set up MySQL service container
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: messaging_app_test
          MYSQL_USER: django_user
          MYSQL_PASSWORD: django_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --character-set-server=utf8mb4
          --collation-server=utf8mb4_unicode_ci

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    # Step 3: Install system dependencies needed for MySQL
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libmysqlclient-dev \
          pkg-config \
          default-mysql-client

    # Step 4: Install Python dependencies
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mysqlclient coverage

    # Step 5: Wait for MySQL to be ready
    - name: Wait for MySQL to be ready
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; then
            echo "MySQL is ready"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done

    # Step 6: Set up the test database
    - name: Set up test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS messaging_app_test;"
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "GRANT ALL PRIVILEGES ON messaging_app_test.* TO 'django_user'@'%';"
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "FLUSH PRIVILEGES;"

    # Step 7: Run Django system checks
    - name: Run Django system checks
      env:
        DATABASE_URL: mysql://django_user:django_password@127.0.0.1:3306/messaging_app_test
      run: |
        python manage.py check

    # Step 8: Run database migrations
    - name: Run Django migrations
      env:
        DATABASE_URL: mysql://django_user:django_password@127.0.0.1:3306/messaging_app_test
      run: |
        python manage.py migrate --verbosity=2

    # Step 9: Run the tests with coverage
    - name: Run tests with coverage
      env:
        DATABASE_URL: mysql://django_user:django_password@127.0.0.1:3306/messaging_app_test
      run: |
        # Create reports directory
        mkdir -p reports

        # Run tests with pytest and coverage
        coverage run --source='.' -m pytest tests/ \
          --junitxml=reports/junit.xml \
          --html=reports/report.html \
          --self-contained-html \
          --verbose

        # Generate coverage report
        coverage report --show-missing
        coverage xml -o reports/coverage.xml
        coverage html -d reports/htmlcov

    # Step 10: Upload test results as artifacts
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          reports/
          
    # Step 11: Upload coverage to Codecov (optional)
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./reports/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false